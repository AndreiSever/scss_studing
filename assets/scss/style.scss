main {
    color: black;
    &-sidebear{
        border: 1px Solid;
    }
    a{
        font-weight: bold;
        &:hover{
            color: red;
        }
    }
}
.funky{
    font:{
        family: fantasy;
        size: 30em;
        weight: bold;
    }
}
.funky{
    font: 20/24px fantasy{
        weight: bold;
    }
}
#context a%extreme{
    color: aqua;
    font-weight: 400;
    font-size: 2em;
}
.notice{
    @extend %extreme;
}
.error {
    border: 1px #f00;
    background-color: #fdd;
  }
  
  .seriousError {
    @extend .error;
    border-width: 3px;
  }
$version: "1.1.3";
/* Version: #{$version}.*/
$width: 5em;
#main{
    width: $width;
}
#main{
    $width: 5em !global;
    width: $width;
}
#sidebear{
    width: $width;
}
@mixin firefox-message($selector){
    body.firfox #{$selector}:before{
        content: "hi";
    }
}
@include firefox-message(".header");
@mixin message($selector, $bold, $text){
    body.firfox #{$selector}:before{
        content: $text;
        font-weight: #{$bold};
    }
}
@include message(".footer", "bold", "adsadasd");
$size: 10px 12px 16px;
$newsize: join($size, 10px);
$newsize: append($newsize,20px);
#sidebear{
    width: nth($size, 2);
}
$map: (key1: 1, key2:2);
$status-color:(
    primary:#000,
    success: #27BA6C,
    info: #03a9f4,
    warning: #FF8833,
    danger: #ff1a1a
);

.message {
    @each $status, $color in $status-color{
        &--#{$status}{
            background: $color;
        }
    }
}
$font-weights: ("regular": 400, "medium": 500, "bold": 700);
.map-get{
    font-weight: map-get($font-weights, "medium");
}
$font-weights: map-merge($font-weights, ("semibold": 900)); 
.map-merge{
    font-weight: map-get($font-weights, "semibold");
}
p {
    font: 10px/8px;             // Явный CSS, деление отсутствует
    $width: 1000px;
    width: $width/2;            // Используется переменная, операция деления
    width: round(1.5)/2;        // Используется функция, операция деления
    height: (500px/2);          // Обособление скобками, операция деления
    margin-left: 5px + 8px/2px; // Используется +, операция деления
  }
  p {
    $font-size: 12px;
    $line-height: 30px;
    font: #{$font-size}/#{$line-height};
  }
  p {
    color: #010203 + #040506;
  }
  p {
    color: #010203 * 2;
  }

  $translucent-red: rgba(255, 0, 0, 0.5);
  p{
      color: opacify($translucent-red, 0.3);
      background-color: transparentize($translucent-red, 0.25);
  }
  p {
    cursor: e + -resize;
  }
  p:before {
    content: "Foo " + Bar;
    font-family: sans- + "serif";
  }
  p {
    margin: 3px + 4px auto;
  }
  p:before {
    content: "Я съел #{5 + 10} пирогов!";
  }
  $value: null;
  p:before {
      content: "Я съел #{$value} пирогов!";
  }
  $menuOn: true;
  $menuDropDown: false;
  .menu li{
      color: #27BA6C;
      text-decoration: underline;
      @if $menuOn ==true and $menuDropDown == true{
          position: relative;
      }
  }
  p{
      color: hsl($hue: 0, $saturation: 100%, $lightness: 50%);
  }
  
  $name: foo;
  $attr: border;
  p.#{$name}{
      #{$attr}-color:blue;
    }
    $selector:  ((".foo.bar" ".baz.bang"), ".bip.qux");
    .foo.bar .baz.bang, .bip.qux{
        $selector: &;
    }
    
    @mixin does-parent-exist{
        @if & {
            &:hover{
                color:red;
            }
        }@else{
            a {
                color: red;
            }
        }
    }
    a {
        @include does-parent-exist;
    }
    $content: "Текстовый текст";
    $content: "Новый текстовый текст?" !default;
    $new_content: "Как пройти в библиотеку?";
    #main {
        content: $content;
        new-content: $new_content;
    }

    @import "colors";
    
    .sidebar {
        width: 300px;
        
        @media screen and (orientation: landscape){
            width: 500px;
        }
    }
    @media screen {
        .sidebar{
            @media (orientation: landscape){
                width: 500px;
            }
        }
    }

    $media: screen;
    $feature: -webkit-min-device-pixel-ratio;
    $value: 1.5;

    @media #{$media} and ($feature: $value) {
        .sidebar {
            width: 500px;
        }
    }

    @media print {
        .page {
          width: 8in;
      
          @at-root (without: media) {
            color: red;
          }
        }
      }

      @debug 10em + 12em;

      @mixin adjust-location($x, $y){
          @if unitless($x){
              @warn "Предположительно задано в пикселях";
              $x: 1px *$x;
          }
          @if unitless($y){
            @warn "Предположительно задано в пикселях";
            $y: 1px *$y;
        }
        position: relative;
        left: $x;
        top: $y;
      }
      .notice{
          @include adjust-location(2px, 1px);
      }

      @mixin adjust-location($x, $y) {
        @if unitless($x) {
          @error "$x не может быть безразмерным, было .";
        }
        @if unitless($y) {
          @error "$y не может быть безразмерным, было .";
        }
        position: relative; 
        left: $x; 
        top: $y;
      }

      $type: monster;
      p{
          @if $type == ocean{
              color: blue;
          }@else if $type == matador{
            color: red;
          }@else if $type == monster{
              color: green;
          }@else{
              color: black;
          }
      }

      @for $i from 1 through 3{
          .item-#{$i}{
              width: 2em * $i;
          }
      }

      @for $i from 1 to 4{
        .li-#{$i}{
            width: 2em * $i;
        }
    }
    @each $animal, $color, $cursor in (puma, black, default),
                                (sea-slug, blue, pointer),
                                (egret, white, move) {
        .#{$animal}-icon {
            background-image: url('/images/#{$animal}.png');
            border: 2px solid $color;
            cursor: $cursor;
        }
    }

    @each $head, $massive in (v1: (h1: 2em, h2: 1.5em, h3: 1.2em), v2: (h4: 2em, h5: 1.5em, h6: 1.2em)) {
        @each $header, $size in $massive{
            #{$header} {
            font-size: $size;
            }
        }
      }
    
      $i: 6;
      @while $i > 0 {
        .item-#{$i} { width: 2em * $i; }
        $i: $i - 2;
      }
